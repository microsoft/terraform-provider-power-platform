// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/api (interfaces: DataverseClientInterface)

// Package powerplatform_mocks is a generated GoMock package.
package powerplatform_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	powerplatform_api "github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/api"
	powerplatform_models "github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/models"
)

// MockDataverseClientInterface is a mock of DataverseClientInterface interface.
type MockDataverseClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataverseClientInterfaceMockRecorder
}

// MockDataverseClientInterfaceMockRecorder is the mock recorder for MockDataverseClientInterface.
type MockDataverseClientInterfaceMockRecorder struct {
	mock *MockDataverseClientInterface
}

// NewMockDataverseClientInterface creates a new mock instance.
func NewMockDataverseClientInterface(ctrl *gomock.Controller) *MockDataverseClientInterface {
	mock := &MockDataverseClientInterface{ctrl: ctrl}
	mock.recorder = &MockDataverseClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataverseClientInterface) EXPECT() *MockDataverseClientInterfaceMockRecorder {
	return m.recorder
}

// CreateSolution mocks base method.
func (m *MockDataverseClientInterface) CreateSolution(arg0 context.Context, arg1 string, arg2 powerplatform_models.ImportSolutionDto, arg3, arg4 []byte) (*powerplatform_models.SolutionDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolution", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*powerplatform_models.SolutionDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolution indicates an expected call of CreateSolution.
func (mr *MockDataverseClientInterfaceMockRecorder) CreateSolution(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolution", reflect.TypeOf((*MockDataverseClientInterface)(nil).CreateSolution), arg0, arg1, arg2, arg3, arg4)
}

// DeleteSolution mocks base method.
func (m *MockDataverseClientInterface) DeleteSolution(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolution", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSolution indicates an expected call of DeleteSolution.
func (mr *MockDataverseClientInterfaceMockRecorder) DeleteSolution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolution", reflect.TypeOf((*MockDataverseClientInterface)(nil).DeleteSolution), arg0, arg1, arg2)
}

// Execute mocks base method.
func (m *MockDataverseClientInterface) Execute(arg0 context.Context, arg1, arg2, arg3 string, arg4 interface{}, arg5 []int, arg6 interface{}) (*powerplatform_api.ApiHttpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*powerplatform_api.ApiHttpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockDataverseClientInterfaceMockRecorder) Execute(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDataverseClientInterface)(nil).Execute), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetDefaultCurrencyForEnvironment mocks base method.
func (m *MockDataverseClientInterface) GetDefaultCurrencyForEnvironment(arg0 context.Context, arg1 string) (*powerplatform_models.TransactionCurrencyDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultCurrencyForEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*powerplatform_models.TransactionCurrencyDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultCurrencyForEnvironment indicates an expected call of GetDefaultCurrencyForEnvironment.
func (mr *MockDataverseClientInterfaceMockRecorder) GetDefaultCurrencyForEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultCurrencyForEnvironment", reflect.TypeOf((*MockDataverseClientInterface)(nil).GetDefaultCurrencyForEnvironment), arg0, arg1)
}

// GetSolution mocks base method.
func (m *MockDataverseClientInterface) GetSolution(arg0 context.Context, arg1, arg2 string) (*powerplatform_models.SolutionDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolution", arg0, arg1, arg2)
	ret0, _ := ret[0].(*powerplatform_models.SolutionDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolution indicates an expected call of GetSolution.
func (mr *MockDataverseClientInterfaceMockRecorder) GetSolution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolution", reflect.TypeOf((*MockDataverseClientInterface)(nil).GetSolution), arg0, arg1, arg2)
}

// GetSolutions mocks base method.
func (m *MockDataverseClientInterface) GetSolutions(arg0 context.Context, arg1 string) ([]powerplatform_models.SolutionDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutions", arg0, arg1)
	ret0, _ := ret[0].([]powerplatform_models.SolutionDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutions indicates an expected call of GetSolutions.
func (mr *MockDataverseClientInterfaceMockRecorder) GetSolutions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutions", reflect.TypeOf((*MockDataverseClientInterface)(nil).GetSolutions), arg0, arg1)
}

// GetTableData mocks base method.
func (m *MockDataverseClientInterface) GetTableData(arg0 context.Context, arg1, arg2, arg3 string, arg4 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableData", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTableData indicates an expected call of GetTableData.
func (mr *MockDataverseClientInterfaceMockRecorder) GetTableData(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableData", reflect.TypeOf((*MockDataverseClientInterface)(nil).GetTableData), arg0, arg1, arg2, arg3, arg4)
}

// Initialize mocks base method.
func (m *MockDataverseClientInterface) Initialize(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialize indicates an expected call of Initialize.
func (mr *MockDataverseClientInterfaceMockRecorder) Initialize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockDataverseClientInterface)(nil).Initialize), arg0, arg1)
}

// SetBapiClient mocks base method.
func (m *MockDataverseClientInterface) SetBapiClient(arg0 powerplatform_api.BapiClientInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBapiClient", arg0)
}

// SetBapiClient indicates an expected call of SetBapiClient.
func (mr *MockDataverseClientInterfaceMockRecorder) SetBapiClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBapiClient", reflect.TypeOf((*MockDataverseClientInterface)(nil).SetBapiClient), arg0)
}
