// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/api (interfaces: PowerPlatformClientApiInterface)

// Package powerplatform_mocks is a generated GoMock package.
package powerplatform_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	powerplatform_api "github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/api"
	powerplatform_models "github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/models"
)

// MockPowerPlatformClientApiInterface is a mock of PowerPlatformClientApiInterface interface.
type MockPowerPlatformClientApiInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPowerPlatformClientApiInterfaceMockRecorder
}

// MockPowerPlatformClientApiInterfaceMockRecorder is the mock recorder for MockPowerPlatformClientApiInterface.
type MockPowerPlatformClientApiInterfaceMockRecorder struct {
	mock *MockPowerPlatformClientApiInterface
}

// NewMockPowerPlatformClientApiInterface creates a new mock instance.
func NewMockPowerPlatformClientApiInterface(ctrl *gomock.Controller) *MockPowerPlatformClientApiInterface {
	mock := &MockPowerPlatformClientApiInterface{ctrl: ctrl}
	mock.recorder = &MockPowerPlatformClientApiInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPowerPlatformClientApiInterface) EXPECT() *MockPowerPlatformClientApiInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockPowerPlatformClientApiInterface) Execute(arg0 context.Context, arg1, arg2 string, arg3 interface{}, arg4 []int, arg5 interface{}) (*powerplatform_api.ApiHttpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*powerplatform_api.ApiHttpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockPowerPlatformClientApiInterfaceMockRecorder) Execute(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPowerPlatformClientApiInterface)(nil).Execute), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetBase mocks base method.
func (m *MockPowerPlatformClientApiInterface) GetBase() powerplatform_api.ApiClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBase")
	ret0, _ := ret[0].(powerplatform_api.ApiClientInterface)
	return ret0
}

// GetBase indicates an expected call of GetBase.
func (mr *MockPowerPlatformClientApiInterfaceMockRecorder) GetBase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBase", reflect.TypeOf((*MockPowerPlatformClientApiInterface)(nil).GetBase))
}

// GetBillingPolicies mocks base method.
func (m *MockPowerPlatformClientApiInterface) GetBillingPolicies(arg0 context.Context) ([]powerplatform_models.BillingPolicyDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingPolicies", arg0)
	ret0, _ := ret[0].([]powerplatform_models.BillingPolicyDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingPolicies indicates an expected call of GetBillingPolicies.
func (mr *MockPowerPlatformClientApiInterfaceMockRecorder) GetBillingPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingPolicies", reflect.TypeOf((*MockPowerPlatformClientApiInterface)(nil).GetBillingPolicies), arg0)
}
