// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/bapi (interfaces: ApiClientInterface)

// Package powerplatform_mocks is a generated GoMock package.
package powerplatform_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	powerplatform_bapi "github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/bapi"
	powerplatform_bapi0 "github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/bapi/models"
)

// MockApiClientInterface is a mock of ApiClientInterface interface.
type MockApiClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientInterfaceMockRecorder
}

// MockApiClientInterfaceMockRecorder is the mock recorder for MockApiClientInterface.
type MockApiClientInterfaceMockRecorder struct {
	mock *MockApiClientInterface
}

// NewMockApiClientInterface creates a new mock instance.
func NewMockApiClientInterface(ctrl *gomock.Controller) *MockApiClientInterface {
	mock := &MockApiClientInterface{ctrl: ctrl}
	mock.recorder = &MockApiClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClientInterface) EXPECT() *MockApiClientInterfaceMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method.
func (m *MockApiClientInterface) CreateEnvironment(arg0 context.Context, arg1 powerplatform_bapi0.EnvironmentCreateDto) (*powerplatform_bapi0.EnvironmentDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*powerplatform_bapi0.EnvironmentDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockApiClientInterfaceMockRecorder) CreateEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockApiClientInterface)(nil).CreateEnvironment), arg0, arg1)
}

// CreatePolicy mocks base method.
func (m *MockApiClientInterface) CreatePolicy(arg0 context.Context, arg1 powerplatform_bapi0.DlpPolicyModel) (*powerplatform_bapi0.DlpPolicyModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0, arg1)
	ret0, _ := ret[0].(*powerplatform_bapi0.DlpPolicyModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockApiClientInterfaceMockRecorder) CreatePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockApiClientInterface)(nil).CreatePolicy), arg0, arg1)
}

// CreateSolution mocks base method.
func (m *MockApiClientInterface) CreateSolution(arg0 context.Context, arg1 string, arg2 powerplatform_bapi0.ImportSolutionDto, arg3, arg4 []byte) (*powerplatform_bapi0.SolutionDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolution", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*powerplatform_bapi0.SolutionDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolution indicates an expected call of CreateSolution.
func (mr *MockApiClientInterfaceMockRecorder) CreateSolution(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolution", reflect.TypeOf((*MockApiClientInterface)(nil).CreateSolution), arg0, arg1, arg2, arg3, arg4)
}

// DeleteEnvironment mocks base method.
func (m *MockApiClientInterface) DeleteEnvironment(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockApiClientInterfaceMockRecorder) DeleteEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockApiClientInterface)(nil).DeleteEnvironment), arg0, arg1)
}

// DeletePolicy mocks base method.
func (m *MockApiClientInterface) DeletePolicy(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockApiClientInterfaceMockRecorder) DeletePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockApiClientInterface)(nil).DeletePolicy), arg0, arg1)
}

// DeleteSolution mocks base method.
func (m *MockApiClientInterface) DeleteSolution(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolution", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSolution indicates an expected call of DeleteSolution.
func (mr *MockApiClientInterfaceMockRecorder) DeleteSolution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolution", reflect.TypeOf((*MockApiClientInterface)(nil).DeleteSolution), arg0, arg1, arg2)
}

// DoAuthClientSecret mocks base method.
func (m *MockApiClientInterface) DoAuthClientSecret(arg0 context.Context, arg1, arg2, arg3 string) (*powerplatform_bapi.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoAuthClientSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*powerplatform_bapi.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoAuthClientSecret indicates an expected call of DoAuthClientSecret.
func (mr *MockApiClientInterfaceMockRecorder) DoAuthClientSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAuthClientSecret", reflect.TypeOf((*MockApiClientInterface)(nil).DoAuthClientSecret), arg0, arg1, arg2, arg3)
}

// DoAuthClientSecretForDataverse mocks base method.
func (m *MockApiClientInterface) DoAuthClientSecretForDataverse(arg0 context.Context, arg1 string) (*powerplatform_bapi.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoAuthClientSecretForDataverse", arg0, arg1)
	ret0, _ := ret[0].(*powerplatform_bapi.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoAuthClientSecretForDataverse indicates an expected call of DoAuthClientSecretForDataverse.
func (mr *MockApiClientInterfaceMockRecorder) DoAuthClientSecretForDataverse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAuthClientSecretForDataverse", reflect.TypeOf((*MockApiClientInterface)(nil).DoAuthClientSecretForDataverse), arg0, arg1)
}

// DoAuthUsernamePassword mocks base method.
func (m *MockApiClientInterface) DoAuthUsernamePassword(arg0 context.Context, arg1, arg2, arg3 string) (*powerplatform_bapi.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoAuthUsernamePassword", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*powerplatform_bapi.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoAuthUsernamePassword indicates an expected call of DoAuthUsernamePassword.
func (mr *MockApiClientInterfaceMockRecorder) DoAuthUsernamePassword(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAuthUsernamePassword", reflect.TypeOf((*MockApiClientInterface)(nil).DoAuthUsernamePassword), arg0, arg1, arg2, arg3)
}

// GetConnectors mocks base method.
func (m *MockApiClientInterface) GetConnectors(arg0 context.Context) ([]powerplatform_bapi0.ConnectorDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectors", arg0)
	ret0, _ := ret[0].([]powerplatform_bapi0.ConnectorDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectors indicates an expected call of GetConnectors.
func (mr *MockApiClientInterfaceMockRecorder) GetConnectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectors", reflect.TypeOf((*MockApiClientInterface)(nil).GetConnectors), arg0)
}

// GetEnvironment mocks base method.
func (m *MockApiClientInterface) GetEnvironment(arg0 context.Context, arg1 string) (*powerplatform_bapi0.EnvironmentDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*powerplatform_bapi0.EnvironmentDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockApiClientInterfaceMockRecorder) GetEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockApiClientInterface)(nil).GetEnvironment), arg0, arg1)
}

// GetEnvironments mocks base method.
func (m *MockApiClientInterface) GetEnvironments(arg0 context.Context) ([]powerplatform_bapi0.EnvironmentDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironments", arg0)
	ret0, _ := ret[0].([]powerplatform_bapi0.EnvironmentDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironments indicates an expected call of GetEnvironments.
func (mr *MockApiClientInterfaceMockRecorder) GetEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironments", reflect.TypeOf((*MockApiClientInterface)(nil).GetEnvironments), arg0)
}

// GetPolicies mocks base method.
func (m *MockApiClientInterface) GetPolicies(arg0 context.Context) ([]powerplatform_bapi0.DlpPolicyModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicies", arg0)
	ret0, _ := ret[0].([]powerplatform_bapi0.DlpPolicyModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicies indicates an expected call of GetPolicies.
func (mr *MockApiClientInterfaceMockRecorder) GetPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicies", reflect.TypeOf((*MockApiClientInterface)(nil).GetPolicies), arg0)
}

// GetPolicy mocks base method.
func (m *MockApiClientInterface) GetPolicy(arg0 context.Context, arg1 string) (*powerplatform_bapi0.DlpPolicyModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0, arg1)
	ret0, _ := ret[0].(*powerplatform_bapi0.DlpPolicyModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockApiClientInterfaceMockRecorder) GetPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockApiClientInterface)(nil).GetPolicy), arg0, arg1)
}

// GetPowerApps mocks base method.
func (m *MockApiClientInterface) GetPowerApps(arg0 context.Context, arg1 string) ([]powerplatform_bapi0.PowerAppBapi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerApps", arg0, arg1)
	ret0, _ := ret[0].([]powerplatform_bapi0.PowerAppBapi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPowerApps indicates an expected call of GetPowerApps.
func (mr *MockApiClientInterfaceMockRecorder) GetPowerApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerApps", reflect.TypeOf((*MockApiClientInterface)(nil).GetPowerApps), arg0, arg1)
}

// GetSolution mocks base method.
func (m *MockApiClientInterface) GetSolution(arg0 context.Context, arg1, arg2 string) (*powerplatform_bapi0.SolutionDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolution", arg0, arg1, arg2)
	ret0, _ := ret[0].(*powerplatform_bapi0.SolutionDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolution indicates an expected call of GetSolution.
func (mr *MockApiClientInterfaceMockRecorder) GetSolution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolution", reflect.TypeOf((*MockApiClientInterface)(nil).GetSolution), arg0, arg1, arg2)
}

// GetSolutions mocks base method.
func (m *MockApiClientInterface) GetSolutions(arg0 context.Context, arg1 string) ([]powerplatform_bapi0.SolutionDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutions", arg0, arg1)
	ret0, _ := ret[0].([]powerplatform_bapi0.SolutionDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutions indicates an expected call of GetSolutions.
func (mr *MockApiClientInterfaceMockRecorder) GetSolutions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutions", reflect.TypeOf((*MockApiClientInterface)(nil).GetSolutions), arg0, arg1)
}

// UpdateEnvironment mocks base method.
func (m *MockApiClientInterface) UpdateEnvironment(arg0 context.Context, arg1 string, arg2 powerplatform_bapi0.EnvironmentDto) (*powerplatform_bapi0.EnvironmentDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*powerplatform_bapi0.EnvironmentDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment.
func (mr *MockApiClientInterfaceMockRecorder) UpdateEnvironment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockApiClientInterface)(nil).UpdateEnvironment), arg0, arg1, arg2)
}

// UpdatePolicy mocks base method.
func (m *MockApiClientInterface) UpdatePolicy(arg0 context.Context, arg1 string, arg2 powerplatform_bapi0.DlpPolicyModel) (*powerplatform_bapi0.DlpPolicyModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*powerplatform_bapi0.DlpPolicyModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockApiClientInterfaceMockRecorder) UpdatePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockApiClientInterface)(nil).UpdatePolicy), arg0, arg1, arg2)
}
