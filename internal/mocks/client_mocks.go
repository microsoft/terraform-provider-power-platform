// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/api (interfaces: ClientInterface)

// Package powerplatform_mocks is a generated GoMock package.
package powerplatform_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	powerplatform "github.com/microsoft/terraform-provider-power-platform/internal/powerplatform/api"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method.
func (m *MockClientInterface) CreateEnvironment(arg0 context.Context, arg1 powerplatform.EnvironmentCreate) (*powerplatform.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*powerplatform.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockClientInterfaceMockRecorder) CreateEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockClientInterface)(nil).CreateEnvironment), arg0, arg1)
}

// CreatePolicy mocks base method.
func (m *MockClientInterface) CreatePolicy(arg0 context.Context, arg1 powerplatform.DlpPolicy) (*powerplatform.DlpPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0, arg1)
	ret0, _ := ret[0].(*powerplatform.DlpPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockClientInterfaceMockRecorder) CreatePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockClientInterface)(nil).CreatePolicy), arg0, arg1)
}

// CreateSolution mocks base method.
func (m *MockClientInterface) CreateSolution(arg0 context.Context, arg1 string, arg2 powerplatform.Solution, arg3, arg4 []byte) (*powerplatform.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolution", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*powerplatform.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolution indicates an expected call of CreateSolution.
func (mr *MockClientInterfaceMockRecorder) CreateSolution(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolution", reflect.TypeOf((*MockClientInterface)(nil).CreateSolution), arg0, arg1, arg2, arg3, arg4)
}

// CreateUser mocks base method.
func (m *MockClientInterface) CreateUser(arg0 context.Context, arg1 string, arg2 powerplatform.User) (*powerplatform.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*powerplatform.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientInterfaceMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClientInterface)(nil).CreateUser), arg0, arg1, arg2)
}

// DeleteEnvironment mocks base method.
func (m *MockClientInterface) DeleteEnvironment(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockClientInterfaceMockRecorder) DeleteEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockClientInterface)(nil).DeleteEnvironment), arg0, arg1)
}

// DeletePolicy mocks base method.
func (m *MockClientInterface) DeletePolicy(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockClientInterfaceMockRecorder) DeletePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockClientInterface)(nil).DeletePolicy), arg0, arg1)
}

// DeleteSolution mocks base method.
func (m *MockClientInterface) DeleteSolution(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolution", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSolution indicates an expected call of DeleteSolution.
func (mr *MockClientInterfaceMockRecorder) DeleteSolution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolution", reflect.TypeOf((*MockClientInterface)(nil).DeleteSolution), arg0, arg1, arg2)
}

// DeleteUser mocks base method.
func (m *MockClientInterface) DeleteUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClientInterfaceMockRecorder) DeleteUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClientInterface)(nil).DeleteUser), arg0, arg1, arg2)
}

// DoBasicAuth mocks base method.
func (m *MockClientInterface) DoBasicAuth(arg0, arg1, arg2 string) (*powerplatform.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoBasicAuth", arg0, arg1, arg2)
	ret0, _ := ret[0].(*powerplatform.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoBasicAuth indicates an expected call of DoBasicAuth.
func (mr *MockClientInterfaceMockRecorder) DoBasicAuth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoBasicAuth", reflect.TypeOf((*MockClientInterface)(nil).DoBasicAuth), arg0, arg1, arg2)
}

// GetConnectors mocks base method.
func (m *MockClientInterface) GetConnectors(arg0 context.Context) ([]powerplatform.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectors", arg0)
	ret0, _ := ret[0].([]powerplatform.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectors indicates an expected call of GetConnectors.
func (mr *MockClientInterfaceMockRecorder) GetConnectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectors", reflect.TypeOf((*MockClientInterface)(nil).GetConnectors), arg0)
}

// GetEnvironment mocks base method.
func (m *MockClientInterface) GetEnvironment(arg0 context.Context, arg1 string) (*powerplatform.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*powerplatform.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockClientInterfaceMockRecorder) GetEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockClientInterface)(nil).GetEnvironment), arg0, arg1)
}

// GetEnvironments mocks base method.
func (m *MockClientInterface) GetEnvironments(arg0 context.Context) ([]powerplatform.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironments", arg0)
	ret0, _ := ret[0].([]powerplatform.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironments indicates an expected call of GetEnvironments.
func (mr *MockClientInterfaceMockRecorder) GetEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironments", reflect.TypeOf((*MockClientInterface)(nil).GetEnvironments), arg0)
}

// GetPolicies mocks base method.
func (m *MockClientInterface) GetPolicies(arg0 context.Context) ([]powerplatform.DlpPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicies", arg0)
	ret0, _ := ret[0].([]powerplatform.DlpPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicies indicates an expected call of GetPolicies.
func (mr *MockClientInterfaceMockRecorder) GetPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicies", reflect.TypeOf((*MockClientInterface)(nil).GetPolicies), arg0)
}

// GetPolicy mocks base method.
func (m *MockClientInterface) GetPolicy(arg0 context.Context, arg1 string) (*powerplatform.DlpPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0, arg1)
	ret0, _ := ret[0].(*powerplatform.DlpPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockClientInterfaceMockRecorder) GetPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockClientInterface)(nil).GetPolicy), arg0, arg1)
}

// GetPowerApps mocks base method.
func (m *MockClientInterface) GetPowerApps(arg0 context.Context, arg1 string) ([]powerplatform.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerApps", arg0, arg1)
	ret0, _ := ret[0].([]powerplatform.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPowerApps indicates an expected call of GetPowerApps.
func (mr *MockClientInterfaceMockRecorder) GetPowerApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerApps", reflect.TypeOf((*MockClientInterface)(nil).GetPowerApps), arg0, arg1)
}

// GetSolutions mocks base method.
func (m *MockClientInterface) GetSolutions(arg0 context.Context, arg1 string) ([]powerplatform.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutions", arg0, arg1)
	ret0, _ := ret[0].([]powerplatform.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutions indicates an expected call of GetSolutions.
func (mr *MockClientInterfaceMockRecorder) GetSolutions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutions", reflect.TypeOf((*MockClientInterface)(nil).GetSolutions), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockClientInterface) GetUser(arg0 context.Context, arg1, arg2 string) (*powerplatform.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*powerplatform.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockClientInterfaceMockRecorder) GetUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClientInterface)(nil).GetUser), arg0, arg1, arg2)
}

// GetUsers mocks base method.
func (m *MockClientInterface) GetUsers(arg0 context.Context, arg1 string) ([]powerplatform.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].([]powerplatform.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockClientInterfaceMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClientInterface)(nil).GetUsers), arg0, arg1)
}

// UpdateEnvironment mocks base method.
func (m *MockClientInterface) UpdateEnvironment(arg0 context.Context, arg1 string, arg2 powerplatform.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment.
func (mr *MockClientInterfaceMockRecorder) UpdateEnvironment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockClientInterface)(nil).UpdateEnvironment), arg0, arg1, arg2)
}

// UpdatePolicy mocks base method.
func (m *MockClientInterface) UpdatePolicy(arg0 context.Context, arg1 string, arg2 powerplatform.DlpPolicy) (*powerplatform.DlpPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*powerplatform.DlpPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockClientInterfaceMockRecorder) UpdatePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockClientInterface)(nil).UpdatePolicy), arg0, arg1, arg2)
}

// UpdateUser mocks base method.
func (m *MockClientInterface) UpdateUser(arg0 context.Context, arg1 string, arg2 powerplatform.User) (*powerplatform.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*powerplatform.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockClientInterfaceMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockClientInterface)(nil).UpdateUser), arg0, arg1, arg2)
}
