[1mdiff --git a/internal/services/data_record/datasource_data_record.go b/internal/services/data_record/datasource_data_record.go[m
[1mindex def6cf6..56a63e1 100644[m
[1m--- a/internal/services/data_record/datasource_data_record.go[m
[1m+++ b/internal/services/data_record/datasource_data_record.go[m
[36m@@ -240,7 +240,7 @@[m [mfunc (d *DataRecordDataSource) Read(ctx context.Context, req datasource.ReadRequ[m
 [m
 	var elements = []attr.Value{}[m
 	for _, record := range queryRespnse.Records {[m
[31m-		columns, err := d.convertColumnsToState(record)[m
[32m+[m		[32mcolumns, err := d.convertColumnsToState(ctx, record)[m
 		if err != nil {[m
 			resp.Diagnostics.AddError("Failed to convert columns to state", err.Error())[m
 			return[m
[36m@@ -265,7 +265,7 @@[m [mfunc (d *DataRecordDataSource) Read(ctx context.Context, req datasource.ReadRequ[m
 	}[m
 }[m
 [m
[31m-func (d *DataRecordDataSource) convertColumnsToState(columns map[string]any) (*basetypes.DynamicValue, error) {[m
[32m+[m[32mfunc (d *DataRecordDataSource) convertColumnsToState(ctx context.Context, columns map[string]any) (*basetypes.DynamicValue, error) {[m
 	if columns == nil {[m
 		return nil, nil[m
 	}[m
[36m@@ -275,15 +275,15 @@[m [mfunc (d *DataRecordDataSource) convertColumnsToState(columns map[string]any) (*b[m
 	for key, value := range columns {[m
 		switch value.(type) {[m
 		case bool:[m
[31m-			caseBool(columns[key].(bool), attributes, attributeTypes, key)[m
[32m+[m			[32mcaseBool(ctx, columns[key].(bool), attributes, attributeTypes, key)[m
 		case int64:[m
[31m-			caseInt64(columns[key].(int64), attributes, attributeTypes, key)[m
[32m+[m			[32mcaseInt64(ctx, columns[key].(int64), attributes, attributeTypes, key)[m
 		case float64:[m
[31m-			caseFloat64(columns[key].(float64), attributes, attributeTypes, key)[m
[32m+[m			[32mcaseFloat64(ctx, columns[key].(float64), attributes, attributeTypes, key)[m
 		case string:[m
[31m-			caseString(columns[key].(string), attributes, attributeTypes, key)[m
[32m+[m			[32mcaseString(ctx, columns[key].(string), attributes, attributeTypes, key)[m
 		case map[string]any:[m
[31m-			typ, val, _ := d.buildObjectValueFromX(columns[key].(map[string]any))[m
[32m+[m			[32mtyp, val, _ := d.buildObjectValueFromX(ctx, columns[key].(map[string]any))[m
 			tupleElementType := types.ObjectType{[m
 				AttrTypes: typ,[m
 			}[m
[36m@@ -291,7 +291,7 @@[m [mfunc (d *DataRecordDataSource) convertColumnsToState(columns map[string]any) (*b[m
 			attributes[key] = v[m
 			attributeTypes[key] = tupleElementType[m
 		case []any:[m
[31m-			typeObj, valObj := d.buildExpandObject(columns[key].([]any))[m
[32m+[m			[32mtypeObj, valObj := d.buildExpandObject(ctx, columns[key].([]any))[m
 			attributeTypes[key] = typeObj[m
 			attributes[key] = valObj[m
 		}[m
[36m@@ -302,22 +302,22 @@[m [mfunc (d *DataRecordDataSource) convertColumnsToState(columns map[string]any) (*b[m
 	return &result, nil[m
 }[m
 [m
[31m-func (d *DataRecordDataSource) buildObjectValueFromX(columns map[string]any) (map[string]attr.Type, map[string]attr.Value, error) {[m
[32m+[m[32mfunc (d *DataRecordDataSource) buildObjectValueFromX(ctx context.Context, columns map[string]any) (map[string]attr.Type, map[string]attr.Value, error) {[m
 	knownObjectType := map[string]attr.Type{}[m
 	knownObjectValue := map[string]attr.Value{}[m
 [m
 	for key, value := range columns {[m
 		switch value.(type) {[m
 		case bool:[m
[31m-			caseBool(columns[key].(bool), knownObjectValue, knownObjectType, key)[m
[32m+[m			[32mcaseBool(ctx, columns[key].(bool), knownObjectValue, knownObjectType, key)[m
 		case int64:[m
[31m-			caseInt64(columns[key].(int64), knownObjectValue, knownObjectType, key)[m
[32m+[m			[32mcaseInt64(ctx, columns[key].(int64), knownObjectValue, knownObjectType, key)[m
 		case float64:[m
[31m-			caseFloat64(columns[key].(float64), knownObjectValue, knownObjectType, key)[m
[32m+[m			[32mcaseFloat64(ctx, columns[key].(float64), knownObjectValue, knownObjectType, key)[m
 		case string:[m
[31m-			caseString(columns[key].(string), knownObjectValue, knownObjectType, key)[m
[32m+[m			[32mcaseString(ctx, columns[key].(string), knownObjectValue, knownObjectType, key)[m
 		case map[string]any:[m
[31m-			typ, val, _ := d.buildObjectValueFromX(columns[key].(map[string]any))[m
[32m+[m			[32mtyp, val, _ := d.buildObjectValueFromX(ctx, columns[key].(map[string]any))[m
 			tupleElementType := types.ObjectType{[m
 				AttrTypes: typ,[m
 			}[m
[36m@@ -325,7 +325,7 @@[m [mfunc (d *DataRecordDataSource) buildObjectValueFromX(columns map[string]any) (ma[m
 			knownObjectValue[key] = v[m
 			knownObjectType[key] = tupleElementType[m
 		case []any:[m
[31m-			typeObj, valObj := d.buildExpandObject(columns[key].([]any))[m
[32m+[m			[32mtypeObj, valObj := d.buildExpandObject(ctx, columns[key].([]any))[m
 			knownObjectValue[key] = valObj[m
 			knownObjectType[key] = typeObj[m
 		}[m
[36m@@ -333,11 +333,11 @@[m [mfunc (d *DataRecordDataSource) buildObjectValueFromX(columns map[string]any) (ma[m
 	return knownObjectType, knownObjectValue, nil[m
 }[m
 [m
[31m-func (d *DataRecordDataSource) buildExpandObject(items []any) (basetypes.TupleType, basetypes.TupleValue) {[m
[32m+[m[32mfunc (d *DataRecordDataSource) buildExpandObject(ctx context.Context, items []any) (basetypes.TupleType, basetypes.TupleValue) {[m
 	var listTypes []attr.Type[m
 	var listValues []attr.Value[m
 	for _, item := range items {[m
[31m-		typ, val, _ := d.buildObjectValueFromX(item.(map[string]any))[m
[32m+[m		[32mtyp, val, _ := d.buildObjectValueFromX(ctx, item.(map[string]any))[m
 		tupleElementType := types.ObjectType{[m
 			AttrTypes: typ,[m
 		}[m
[1mdiff --git a/internal/services/data_record/resource_data_record.go b/internal/services/data_record/resource_data_record.go[m
[1mindex 2597b55..3c14e2b 100644[m
[1m--- a/internal/services/data_record/resource_data_record.go[m
[1m+++ b/internal/services/data_record/resource_data_record.go[m
[36m@@ -323,50 +323,50 @@[m [mfunc convertResourceModelToMap(columnsAsString *string) (mapColumns map[string]a[m
 	return mapColumns, nil[m
 }[m
 [m
[31m-func caseBool(columnValue any, attrValue map[string]attr.Value, attrType map[string]attr.Type, key string) {[m
[32m+[m[32mfunc caseBool(ctx context.Context, columnValue any, attrValue map[string]attr.Value, attrType map[string]attr.Type, key string) {[m
 	value, ok := columnValue.(bool)[m
 	if !ok {[m
[31m-		tflog.Debug(context.TODO(), "caseBool: failed to cast value to bool", map[string]any{"key": key, "value_type": fmt.Sprintf("%T", columnValue)})[m
[32m+[m		[32mtflog.Debug(ctx, "caseBool: failed to cast value to bool", map[string]any{"key": key, "value_type": fmt.Sprintf("%T", columnValue)})[m
 		return[m
 	}[m
 	attrValue[key] = types.BoolValue(value)[m
 	attrType[key] = types.BoolType[m
 }[m
 [m
[31m-func caseInt64(columnValue any, attrValue map[string]attr.Value, attrType map[string]attr.Type, key string) {[m
[32m+[m[32mfunc caseInt64(ctx context.Context, columnValue any, attrValue map[string]attr.Value, attrType map[string]attr.Type, key string) {[m
 	value, ok := columnValue.(int64)[m
 	if !ok {[m
[31m-		tflog.Debug(context.TODO(), "caseInt64: failed to cast value to int64", map[string]any{"key": key, "value_type": fmt.Sprintf("%T", columnValue)})[m
[32m+[m		[32mtflog.Debug(ctx, "caseInt64: failed to cast value to int64", map[string]any{"key": key, "value_type": fmt.Sprintf("%T", columnValue)})[m
 		return[m
 	}[m
 	attrValue[key] = types.Int64Value(value)[m
 	attrType[key] = types.Int64Type[m
 }[m
 [m
[31m-func caseFloat64(columnValue any, attrValue map[string]attr.Value, attrType map[string]attr.Type, key string) {[m
[32m+[m[32mfunc caseFloat64(ctx context.Context, columnValue any, attrValue map[string]attr.Value, attrType map[string]attr.Type, key string) {[m
 	value, ok := columnValue.(float64)[m
 	if !ok {[m
[31m-		tflog.Debug(context.TODO(), "caseFloat64: failed to cast value to float64", map[string]any{"key": key, "value_type": fmt.Sprintf("%T", columnValue)})[m
[32m+[m		[32mtflog.Debug(ctx, "caseFloat64: failed to cast value to float64", map[string]any{"key": key, "value_type": fmt.Sprintf("%T", columnValue)})[m
 		return[m
 	}[m
 	attrValue[key] = types.Float64Value(value)[m
 	attrType[key] = types.Float64Type[m
 }[m
 [m
[31m-func caseString(columnValue any, attrValue map[string]attr.Value, attrType map[string]attr.Type, key string) {[m
[32m+[m[32mfunc caseString(ctx context.Context, columnValue any, attrValue map[string]attr.Value, attrType map[string]attr.Type, key string) {[m
 	value, ok := columnValue.(string)[m
 	if !ok {[m
[31m-		tflog.Debug(context.TODO(), "caseString: failed to cast value to string", map[string]any{"key": key, "value_type": fmt.Sprintf("%T", columnValue)})[m
[32m+[m		[32mtflog.Debug(ctx, "caseString: failed to cast value to string", map[string]any{"key": key, "value_type": fmt.Sprintf("%T", columnValue)})[m
 		return[m
 	}[m
 	attrValue[key] = types.StringValue(value)[m
 	attrType[key] = types.StringType[m
 }[m
 [m
[31m-func caseMapStringOfAny(columnValue any, attrValue map[string]attr.Value, attrType map[string]attr.Type, key, entityLogicalName string, objectType map[string]attr.Type) {[m
[32m+[m[32mfunc caseMapStringOfAny(ctx context.Context, columnValue any, attrValue map[string]attr.Value, attrType map[string]attr.Type, key, entityLogicalName string, objectType map[string]attr.Type) {[m
 	value, ok := columnValue.(string)[m
 	if !ok {[m
[31m-		tflog.Debug(context.TODO(), "caseMapStringOfAny: failed to cast value to string", map[string]any{"key": key, "value_type": fmt.Sprintf("%T", columnValue)})[m
[32m+[m		[32mtflog.Debug(ctx, "caseMapStringOfAny: failed to cast value to string", map[string]any{"key": key, "value_type": fmt.Sprintf("%T", columnValue)})[m
 		return[m
 	}[m
 	dataRecordId := value[m
[36m@@ -449,19 +449,19 @@[m [mfunc (r *DataRecordResource) convertColumnsToState(ctx context.Context, apiClien[m
 	for key, value := range mapColumns {[m
 		switch value.(type) {[m
 		case bool:[m
[31m-			caseBool(columns[key], attributes, attributeTypes, key)[m
[32m+[m			[32mcaseBool(ctx, columns[key], attributes, attributeTypes, key)[m
 		case int64:[m
[31m-			caseInt64(columns[key], attributes, attributeTypes, key)[m
[32m+[m			[32mcaseInt64(ctx, columns[key], attributes, attributeTypes, key)[m
 		case float64:[m
[31m-			caseFloat64(columns[key], attributes, attributeTypes, key)[m
[32m+[m			[32mcaseFloat64(ctx, columns[key], attributes, attributeTypes, key)[m
 		case string:[m
[31m-			caseString(columns[key], attributes, attributeTypes, key)[m
[32m+[m			[32mcaseString(ctx, columns[key], attributes, attributeTypes, key)[m
 		case map[string]any:[m
 			entityLogicalName, err := apiClient.GetEntityRelationDefinitionInfo(ctx, environmentId, tableLogicalName, key)[m
 			if err != nil {[m
 				return nil, errors.New("error getting entity relation definition info: " + err.Error())[m
 			}[m
[31m-			caseMapStringOfAny(columns[fmt.Sprintf("_%s_value", key)], attributes, attributeTypes, key, entityLogicalName, objectType)[m
[32m+[m			[32mcaseMapStringOfAny(ctx, columns[fmt.Sprintf("_%s_value", key)], attributes, attributeTypes, key, entityLogicalName, objectType)[m
 		case []any:[m
 			err := caseArrayOfAny(ctx, attributes, attributeTypes, apiClient, objectType, key, environmentId, tableLogicalName, *recordid)[m
 			if err != nil {[m
